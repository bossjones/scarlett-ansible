# -*- mode: ruby -*-
# vi: set ft=ruby :

# source: https://github.com/mitchellh/vagrant/issues/5774
def usbfilter_exists(vendor_id, product_id)
  #
  # Determine if a usbfilter with the provided Vendor/Product ID combination
  # already exists on this VM.
  #
  # TODO: Use a more reliable way of retrieving this information.
  #
  # NOTE: The "machinereadable" output for usbfilters is more
  #       complicated to work with (due to variable names including
  #       the numeric filter index) so we don't use it here.
  #
  machine_id_filepath = ".vagrant/machines/default/virtualbox/id"

  if not File.exists? machine_id_filepath
    # VM hasn't been created yet.
    return false
  end

  # VBoxManage showvminfo $(<.vagrant/machines/default/virtualbox/id)
  vm_info = `VBoxManage showvminfo $(<#{machine_id_filepath})`
  filter_match = "VendorId:         #{vendor_id}\nProductId:        #{product_id}\n"
  return vm_info.include? filter_match
end

def better_usbfilter_add(vb, vendor_id, product_id, filter_name, revision, manufacturer, product, remote)
  #
  # This is a workaround for the fact VirtualBox doesn't provide
  # a way for preventing duplicate USB filters from being added.
  #
  # TODO: Implement this in a way that it doesn't get run multiple
  #       times on each Vagrantfile parsing.
  #

  if not usbfilter_exists(vendor_id, product_id)
    vb.customize ["usbfilter", "add", "0",
                  "--target", :id,
                  "--name", filter_name,
                  "--vendorid", vendor_id,
                  "--productid", product_id
                  # ,
                  # "--revision", revision,
                  # "--manufacturer", manufacturer,
                  # "--product", product,
                  # "--remote", remote
                  ]
  end
end

Vagrant.configure("2")  do |config|

  # base information
  config.vm.box = "scarlettpi-base-ubuntu-14-04"
  config.vm.box_url = "file:///Users/malcolm/ubuntu_14_04_base.box"

  # name
  # CHANGME
  config.vm.hostname = "scarlett-ansible.local"
  config.vm.boot_timeout = 400

  # networking
  config.vm.network "public_network", :bridge => 'en0: Wi-Fi (AirPort)'
  config.vm.network "forwarded_port", guest: 19360, host: 1936
  config.vm.network "forwarded_port", guest: 139, host: 1139
  config.vm.network "forwarded_port", guest: 8081, host: 8881
  config.vm.network "forwarded_port", guest: 2376, host: 2376

  config.ssh.username = "pi"
  config.ssh.host = "127.0.0.1"
  config.ssh.guest_port = "2222"
  config.ssh.private_key_path = "/Users/malcolm/.ssh/id_rsa_ssh"
  config.ssh.forward_agent = true
  config.ssh.forward_x11 = true
  config.ssh.insert_key = false
  #config.ssh.pty = true
  #config.ssh.shell = "bash -c 'BASH_ENV=/etc/profile exec bash'"

  # config.vm.provision "shell", path: "./bootstrap/start_anaconda.sh"

  config.vm.provider :virtualbox do |vb|
    # Don't boot with headless mode
    vb.gui = true

    # user modifiable memory/cpu settings
    vb.memory = 2048
    vb.cpus = 2

    # NOTE: Not working for some reason
    # DISABLED - DOING MANUALLY # better_usbfilter_add(vb, "0D8C", "013C", "C-Media Electronics Inc. USB PnP Sound Device [0100]", "0100", "C-Media Electronics Inc.", "USB PnP Sound Device", "0")

    # source: http://unix.stackexchange.com/questions/129305/how-can-i-enable-access-to-usb-devices-within-virtualbox-guests
    # NOTE: usb info for my microphone
    # UUID:               c9a5edd0-79a5-4d65-81f6-fe3fddc3be4c
    # VendorId:           0x0d8c (0D8C)
    # ProductId:          0x013c (013C)
    # Revision:           1.0 (0100)
    # Port:               2
    # USB version/speed:  0/Full
    # Manufacturer:       C-Media Electronics Inc.
    # Product:            USB PnP Sound Device
    # Address:            p=0x013c;v=0x0d8c;s=0x000141866d4a64b4;l=0x14200000
    # Current State:      Unavailable


    vb.customize ["modifyvm", :id, "--usb", "on"]
  end

  config.vm.provision 'ansible' do |ansible|
      ansible.playbook = 'test.yml'
      ansible.verbose = "v"
      ansible.sudo = true
      ansible.host_key_checking = false
      ansible.limit = 'all'
    end

end
